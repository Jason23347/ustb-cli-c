name: CMake Matrix Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build (${{ matrix.architecture }}, ${{ matrix.build_type }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        architecture: [ x86_64, ARM64, ARM32 ]
        build_type: [ Debug, Release ]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Init submodules
        run: git submodule update --init --recursive

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y cmake make g++ ninja-build

      # ARM64 å·¥å…·é“¾ï¼ˆaarch64ï¼‰
      - name: Install ARM64 cross-build dependencies
        if: matrix.architecture == 'ARM64'
        run: sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross

      # ARM32 å·¥å…·é“¾ï¼ˆarmhfï¼‰
      - name: Install ARM32 cross-build dependencies
        if: matrix.architecture == 'ARM32'
        run: sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross

      - name: Configure (CMake)
        run: |
          mkdir -p build
          cd build

          case "${{ matrix.architecture }}" in
            x86_64)
              echo "ðŸ”§ Native x86_64 build"
              cmake .. \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              ;;
            ARM64)
              echo "ðŸ”§ Cross-compiling for ARM64"
              cmake .. \
                -DCMAKE_TOOLCHAIN_FILE=../aarch64-toolchain.cmake \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              ;;
            ARM32)
              echo "ðŸ”§ Cross-compiling for ARM32"
              cmake .. \
                -DCMAKE_TOOLCHAIN_FILE=../armhf-toolchain.cmake \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              ;;
          esac

      - name: Build
        run: |
          cd build
          make -j$(nproc)
